# December 2020, Timo Rey, UniFR - Switzerland

# FINALLY! Here we'll start to compare the samples.
# -> let's get some Bio into the Informatics!!!

# Good luck!
# ******************************************************************************
# 1) Create a read-counts table:
cd 001_Data/04_AnnotReads/
# activate sam-tools as before, in case you'd logged out inbetween:
export PATH=$PWD/../../000_Software/SAMtool/bin:$PATH
# then, in the Ubuntu (or on the server) command-line run:
for i in *-transAnnot.sam ; do echo $i; a=${i/\-transAnnot.sam/};
samtools view $i | awk '$3!="*"{hash[$3]++}END{for(i in hash){print "'$a'\t"i"\t"hash[i]}}' >>transcriptome_counts.txt;
done;
# copy the table to your Windows-machine


# 2) Install DESeq2:
# First, install R version newer than 4.0
# in R (I use R-studio for this), type:
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")                                                  # to read documentation, run (in R): browseVignettes("DESeq2")


# NOTE: all following could also be written into 1 R-script and executed automatically
# 3) Find differences between samples:
# First, load and re-format the counts table:
countsTab <- read.table('C:/Users/timor/Downloads/transcriptome_counts.txt', header=FALSE, sep='\t')
countsDF <- as.data.frame(countsTab)
colnames(countsDF) <- c("sample", "gene", "reads")
myCounts <- xtabs(reads ~gene + sample, countsDF)
# Also make a table with your layout for analysis:
samples <- factor(c("SRR1944912","SRR1944913","SRR1944914", "SRR1944921", "SRR1944922", "SRR1944923")) # list of samples
conditions <- factor(c(rep("WT", 3), rep("elp6_ncs2", 3)))                      # list of conditions
myConditions <- data.frame(row.names = samples, condition = conditions)         # which is which
# Load your data into DESeq:
library('DESeq2')
dds <- DESeqDataSetFromMatrix(countData = myCounts, colData = myConditions, design = ~ condition)
dds <- dds[rowSums(counts(dds))>10]                                             # use a lower-bounds threshold
dds$condition <- relevel(dds$condition, ref = "WT")                             # make sure use correct reference
# Run DESeq2:
dds <- DESeq(dds)
resultsNames(dds)                                                               # <- check out this output and enter it below
# => for me, this outputs: "condition_elp6_ncs2_vs_WT"
res <- results(dds, name="condition_elp6_ncs2_vs_WT")

# 4) Inspect output:
summary(res)                                                                    # returns an overview of results
# Optionally, order results according to p-value: resOrdered <- res[order(res$pvalue),]
# plot the log-fold-changes:
plotMA(res, ylim=c(-2,2))
# plot individual genes:
plotCounts(dds, gene=which.min(res$log2FoldChange), intgroup="condition")       # for instance the one with the smallest lfc
# PCA-plot:
vsd <- vst(dds, blind=FALSE)                                                    # normalise
plotPCA(vsd, intgroup=c("condition"))

# 5) Process results:
resSig <- subset(resOrdered, padj < 0.1)                                        # keep only results that pass adjusted-p-value filtering
resFilt <- results(dds, lfcThreshold = 1.5, altHypothesis="greaterAbs", alpha = 0.1) # Or: filter with padj and lfcThreshold
# Save output as .csv table
write.table(resSig, file='remaining.csv')

norm <- estimateSizeFactors(dds)
write.table(counts(norm), "yeast_riboProfile_normalized.csv", col.names=T, sep=",")
